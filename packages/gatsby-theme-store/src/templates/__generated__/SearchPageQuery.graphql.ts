
/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
  ID: string
}

// Operation related types
export type SearchPageQueryQueryVariables = Exact<{
  query: Maybe<Scalars['String']>;
  map: Maybe<Scalars['String']>;
  fullText: Maybe<Scalars['String']>;
  priceRange: Maybe<Scalars['String']>;
  staticPath: Scalars['Boolean'];
  selectedFacets: Maybe<Array<Vtex_SelectedFacetInput> | Vtex_SelectedFacetInput>;
  orderBy?: Maybe<Scalars['String']>;
}>;


export type SearchPageQueryQuery = { vtex: { productSearch?: Maybe<{ recordsFiltered: Maybe<number>, products: Maybe<Array<Maybe<{ productId: Maybe<string>, productName: Maybe<string>, linkText: Maybe<string>, items: Maybe<Array<Maybe<{ itemId: Maybe<string>, images: Maybe<Array<Maybe<{ imageUrl: Maybe<string>, imageText: Maybe<string> }>>> }>>> }>>> }>, searchMetadata?: Maybe<{ title: Maybe<string>, description: Maybe<string> }>, facets?: Maybe<{ breadcrumb: Maybe<Array<Maybe<{ href: Maybe<string>, name: Maybe<string> }>>>, facets: Maybe<Array<Maybe<{ name: Maybe<string>, type: Maybe<Vtex_FilterType>, values: Maybe<Array<Maybe<{ key: Maybe<string>, name: Maybe<string>, value: Maybe<string>, selected: Maybe<boolean>, quantity: number, range: Maybe<{ from: Maybe<number>, to: Maybe<number> }>, values: Maybe<Array<Maybe<{ key: Maybe<string>, name: Maybe<string>, value: Maybe<string>, selected: Maybe<boolean>, quantity: number, range: Maybe<{ from: Maybe<number>, to: Maybe<number> }>, values: Maybe<Array<Maybe<{ key: Maybe<string>, name: Maybe<string>, value: Maybe<string>, selected: Maybe<boolean>, quantity: number, range: Maybe<{ from: Maybe<number>, to: Maybe<number> }> }>>> }>>> }>>> }>>> }> } };


// Query Related Code

export const SearchPageQuery = {
  query: process.env.NODE_ENV === 'production' ? undefined : "query SearchPageQuery($query: String, $map: String, $fullText: String, $priceRange: String, $staticPath: Boolean!, $selectedFacets: [VTEX_SelectedFacetInput!], $orderBy: String = \"OrderByScoreDESC\") {\n  vtex {\n    productSearch(from: 0, to: 11, hideUnavailableItems: false, productOriginVtex: true, priceRange: $priceRange, simulationBehavior: skip, orderBy: $orderBy, query: $query, map: $map, fullText: $fullText, selectedFacets: $selectedFacets) @include(if: $staticPath) {\n      products {\n        productId\n        productName\n        linkText\n        items {\n          itemId\n          images {\n            imageUrl\n            imageText\n          }\n        }\n      }\n      recordsFiltered\n    }\n    searchMetadata(query: $query, map: $map, fullText: $fullText, selectedFacets: $selectedFacets) @include(if: $staticPath) {\n      title: titleTag\n      description: metaTagDescription\n    }\n    facets(query: $query, map: $map, fullText: $fullText, selectedFacets: $selectedFacets, operator: or, behavior: \"Static\", removeHiddenFacets: true) @include(if: $staticPath) {\n      breadcrumb {\n        href\n        name\n      }\n      facets {\n        name\n        type\n        values {\n          key\n          name\n          value\n          selected\n          quantity\n          range {\n            from\n            to\n          }\n          values: children {\n            key\n            name\n            value\n            selected\n            quantity\n            range {\n              from\n              to\n            }\n            values: children {\n              key\n              name\n              value\n              selected\n              quantity\n              range {\n                from\n                to\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
  sha256Hash: "abd40c2d94da830ec04447a9bdc5cb805091e6be3de1f07a5fed0833158ee3d2",
  operationName: "SearchPageQuery",
}

