/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
}

// Operation related types
export type SearchQueryQueryVariables = Exact<{
  query: Maybe<Scalars['String']>
  map: Maybe<Scalars['String']>
  fullText: Maybe<Scalars['String']>
  selectedFacets: Maybe<Vtex_SelectedFacetInput[]>
  from: Maybe<Scalars['Int']>
  to: Maybe<Scalars['Int']>
  orderBy: Maybe<Scalars['String']>
}>

export type SearchQueryQuery = {
  vtex: {
    productSearch: Maybe<{
      products: Maybe<
        Array<
          Maybe<{
            productId: Maybe<string>
            productName: Maybe<string>
            description: Maybe<string>
            linkText: Maybe<string>
            items: Maybe<
              Array<
                Maybe<{
                  itemId: Maybe<string>
                  images: Maybe<
                    Array<
                      Maybe<{
                        imageUrl: Maybe<string>
                        imageText: Maybe<string>
                      }>
                    >
                  >
                  sellers: Maybe<
                    Array<
                      Maybe<{
                        sellerId: Maybe<string>
                        commercialOffer: Maybe<{
                          availableQuantity: Maybe<number>
                          price: Maybe<number>
                          listPrice: Maybe<number>
                        }>
                      }>
                    >
                  >
                }>
              >
            >
          }>
        >
      >
    }>
  }
}

// Query Related Code

export const SearchQuery = {
  query: undefined,
  sha256Hash:
    'bede5457ddea036c01a5a5f5d1b613bdfa0c742f72fc386c1ef1218c0bff4247',
  operationName: 'SearchQuery',
}
