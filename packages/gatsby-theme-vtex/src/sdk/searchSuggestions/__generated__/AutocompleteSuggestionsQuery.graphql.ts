/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] }
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
}

// Operation related types
export type AutocompleteSuggestionsQueryQueryVariables = Exact<{
  fullText: Scalars['String']
}>

export type AutocompleteSuggestionsQueryQuery = {
  vtex: {
    autocompleteSearchSuggestions: Maybe<{
      searches: Maybe<
        Array<
          Maybe<{
            term: string
            attributes: Maybe<
              Array<Maybe<{ key: string; value: string; labelValue: string }>>
            >
          }>
        >
      >
    }>
  }
}

// Query Related Code

export const AutocompleteSuggestionsQuery = {
  query:
    'query AutocompleteSuggestionsQuery($fullText: String!) {\n  vtex {\n    autocompleteSearchSuggestions(fullText: $fullText) {\n      searches {\n        term\n        attributes {\n          key\n          value\n          labelValue\n        }\n      }\n    }\n  }\n}\n',
  sha256Hash:
    'fe5f05dc669edf91f0e048906b84dba5614b76eda7f1b12db05e7bf34a2eb2e7',
  operationName: 'AutocompleteSuggestionsQuery',
}
