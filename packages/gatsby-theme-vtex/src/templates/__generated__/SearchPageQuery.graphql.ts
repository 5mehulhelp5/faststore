
/**
 * Warning: This is an autogenerated file.
 *
 * Changes in this file won't take effect and will be overwritten
 */

// Base Types
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type Maybe<T> = T | null | undefined
type Scalars = {
  Boolean: boolean
  String: string
  Float: number
  Int: number
}

// Operation related types
export type SearchPageQueryQueryVariables = Exact<{
  query: Maybe<Scalars['String']>;
  map: Maybe<Scalars['String']>;
  staticPath: Scalars['Boolean'];
  orderBy?: Maybe<Scalars['String']>;
}>;


export type SearchPageQueryQuery = { vtex: { productSearch: Maybe<{ titleTag: Maybe<string>, recordsFiltered: Maybe<number>, products: Maybe<Array<Maybe<{ productId: Maybe<string>, productName: Maybe<string>, description: Maybe<string>, linkText: Maybe<string>, items: Maybe<Array<Maybe<{ itemId: Maybe<string>, images: Maybe<Array<Maybe<{ imageUrl: Maybe<string>, imageText: Maybe<string> }>>>, sellers: Maybe<Array<Maybe<{ sellerId: Maybe<string>, commertialOffer: Maybe<{ AvailableQuantity: Maybe<number>, Price: Maybe<number>, ListPrice: Maybe<number> }> }>>> }>>> }>>>, breadcrumb: Maybe<Array<Maybe<{ href: Maybe<string>, name: Maybe<string> }>>> }>, facets: Maybe<{ facets: Maybe<Array<Maybe<{ name: Maybe<string>, type: Maybe<Vtex_FilterType>, values: Maybe<Array<Maybe<{ key: Maybe<string>, name: Maybe<string>, value: Maybe<string>, selected: Maybe<boolean>, quantity: number, values: Maybe<Array<Maybe<{ key: Maybe<string>, name: Maybe<string>, value: Maybe<string>, selected: Maybe<boolean>, quantity: number, values: Maybe<Array<Maybe<{ key: Maybe<string>, name: Maybe<string>, value: Maybe<string>, selected: Maybe<boolean>, quantity: number }>>> }>>> }>>> }>>> }> } };


// Query Related Code

export const SearchPageQuery = {
  query: undefined,
  sha256Hash: "b63c88d7384510ae8583c156b0bb83b4ce6a4451e2f6571d42011a511612520f",
  operationName: "SearchPageQuery",
}

